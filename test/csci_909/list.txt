(data (List a) (Cons [i c] [a (List a)]) (Empty))

(type e (List a))
(define e (Empty))

(type l (List a))
(define l (Cons 1 (Cons 2 (Empty))))

(type length [(List a) integer])
(define length (lambda [l] (cond
                             (Cons? l) (+ 1 (length (Cons-c l)))
                             (Empty? l) 0)))

(type sum [a (List a) a] [(Num a)])
(define sum (lambda [z l] (cond
                          (Cons? l) (+ (Cons-i l) (sum z (Cons-c l)))
                          (Empty? l) z)))

(type map [(List a) [a b] (List b) (List b)])
(define map (lambda [l f acc] (cond
                               (Cons? l) (map (Cons-c l) f (Cons (f (Cons-i l)) acc))
                               (Empty? l) acc)))

(length (Cons 1 (Cons 2 (Empty))))
(sum 0 (Cons 1 (Cons 2 (Empty))))
(sum 0.0 (Cons 1.0 (Cons 2.0 (Empty))))

(map (Cons 1 (Cons 2 (Empty))) (lambda [x] (* x 2)) (Empty))