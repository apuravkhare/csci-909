(type pi double)
(define pi 3.14)

(type add [integer integer integer])
(define add (lambda [a b] (*prim+i a b)))

(type sum integer)
(define sum (add 1 2))

(type gen-num double)
(define gen-num (lambda [] 3.14))

(type square-sum [a a a] [(Num a)])
(define square-sum (lambda [x y] (* (+ x y) (+ x y))))

(square-sum 2 3)
(square-sum 2.0 3.0)

(type fact [integer integer])
(define fact (lambda [x] (if (== 0 x) 1 (* x (fact (- x 1))))))

(fact 5)

; (type fact2 [a a a a] [(Num a) (Eq a)])
; (define fact2 (lambda [x zero one] (if (== zero x) one (* x (fact2 (- x one))))))
; 
; (fact2 5 0 1)
; (fact2 5.0 0.0 1.0)
